// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/06/2022 14:34:09"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MUX8bit4way
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MUX8bit4way_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A0000;
reg [7:0] B0001;
reg [7:0] C0010;
reg [7:0] D0011;
reg [7:0] E0100;
reg [7:0] F0110;
reg [7:0] G0111;
reg [7:0] H1000;
reg sel1;
reg sel2;
reg sel3;
// wires                                               
wire [7:0] Q;

// assign statements (if any)                          
MUX8bit4way i1 (
// port map - connection between master ports and signals/registers   
	.A0000(A0000),
	.B0001(B0001),
	.C0010(C0010),
	.D0011(D0011),
	.E0100(E0100),
	.F0110(F0110),
	.G0111(G0111),
	.H1000(H1000),
	.Q(Q),
	.sel1(sel1),
	.sel2(sel2),
	.sel3(sel3)
);
initial 
begin 
#1000000 $finish;
end 
// A0000[ 7 ]
initial
begin
	A0000[7] = 1'b0;
end 
// A0000[ 6 ]
initial
begin
	A0000[6] = 1'b0;
end 
// A0000[ 5 ]
initial
begin
	A0000[5] = 1'b0;
end 
// A0000[ 4 ]
initial
begin
	A0000[4] = 1'b0;
end 
// A0000[ 3 ]
initial
begin
	A0000[3] = 1'b0;
end 
// A0000[ 2 ]
initial
begin
	A0000[2] = 1'b0;
end 
// A0000[ 1 ]
initial
begin
	A0000[1] = 1'b0;
end 
// A0000[ 0 ]
always
begin
	A0000[0] = 1'b0;
	A0000[0] = #500000 1'b1;
	#500000;
end 
// B0001[ 7 ]
initial
begin
	B0001[7] = 1'b0;
end 
// B0001[ 6 ]
initial
begin
	B0001[6] = 1'b0;
end 
// B0001[ 5 ]
initial
begin
	B0001[5] = 1'b0;
end 
// B0001[ 4 ]
initial
begin
	B0001[4] = 1'b0;
end 
// B0001[ 3 ]
initial
begin
	B0001[3] = 1'b0;
end 
// B0001[ 2 ]
initial
begin
	B0001[2] = 1'b0;
end 
// B0001[ 1 ]
always
begin
	B0001[1] = 1'b0;
	B0001[1] = #500000 1'b1;
	#500000;
end 
// B0001[ 0 ]
always
begin
	B0001[0] = 1'b0;
	B0001[0] = #250000 1'b1;
	#250000;
end 
// C0010[ 7 ]
initial
begin
	C0010[7] = 1'b0;
end 
// C0010[ 6 ]
initial
begin
	C0010[6] = 1'b0;
end 
// C0010[ 5 ]
initial
begin
	C0010[5] = 1'b0;
end 
// C0010[ 4 ]
initial
begin
	C0010[4] = 1'b0;
end 
// C0010[ 3 ]
initial
begin
	C0010[3] = 1'b0;
end 
// C0010[ 2 ]
always
begin
	C0010[2] = 1'b0;
	C0010[2] = #500000 1'b1;
	#500000;
end 
// C0010[ 1 ]
always
begin
	C0010[1] = 1'b0;
	C0010[1] = #250000 1'b1;
	#250000;
end 
// C0010[ 0 ]
always
begin
	C0010[0] = 1'b0;
	C0010[0] = #125000 1'b1;
	#125000;
end 
// D0011[ 7 ]
initial
begin
	D0011[7] = 1'b0;
end 
// D0011[ 6 ]
initial
begin
	D0011[6] = 1'b0;
end 
// D0011[ 5 ]
initial
begin
	D0011[5] = 1'b0;
end 
// D0011[ 4 ]
initial
begin
	D0011[4] = 1'b0;
end 
// D0011[ 3 ]
always
begin
	D0011[3] = 1'b0;
	D0011[3] = #500000 1'b1;
	#500000;
end 
// D0011[ 2 ]
always
begin
	D0011[2] = 1'b0;
	D0011[2] = #250000 1'b1;
	#250000;
end 
// D0011[ 1 ]
always
begin
	D0011[1] = 1'b0;
	D0011[1] = #125000 1'b1;
	#125000;
end 
// D0011[ 0 ]
always
begin
	D0011[0] = 1'b0;
	D0011[0] = #62500 1'b1;
	#62500;
end 
// E0100[ 7 ]
initial
begin
	E0100[7] = 1'b0;
end 
// E0100[ 6 ]
initial
begin
	E0100[6] = 1'b0;
end 
// E0100[ 5 ]
initial
begin
	E0100[5] = 1'b0;
end 
// E0100[ 4 ]
always
begin
	E0100[4] = 1'b0;
	E0100[4] = #500000 1'b1;
	#500000;
end 
// E0100[ 3 ]
always
begin
	E0100[3] = 1'b0;
	E0100[3] = #250000 1'b1;
	#250000;
end 
// E0100[ 2 ]
always
begin
	E0100[2] = 1'b0;
	E0100[2] = #125000 1'b1;
	#125000;
end 
// E0100[ 1 ]
always
begin
	E0100[1] = 1'b0;
	E0100[1] = #62500 1'b1;
	#62500;
end 
// E0100[ 0 ]
always
begin
	E0100[0] = 1'b0;
	E0100[0] = #31250 1'b1;
	#31250;
end 
// F0110[ 7 ]
initial
begin
	F0110[7] = 1'b0;
end 
// F0110[ 6 ]
initial
begin
	F0110[6] = 1'b0;
end 
// F0110[ 5 ]
initial
begin
	F0110[5] = 1'b0;
	F0110[5] = #516000 1'b1;
end 
// F0110[ 4 ]
initial
begin
	F0110[4] = 1'b0;
	F0110[4] = #258000 1'b1;
	F0110[4] = #258000 1'b0;
	F0110[4] = #258000 1'b1;
end 
// F0110[ 3 ]
initial
begin
	repeat(3)
	begin
		F0110[3] = 1'b0;
		F0110[3] = #129000 1'b1;
		# 129000;
	end
	F0110[3] = 1'b0;
	F0110[3] = #129000 1'b1;
end 
// F0110[ 2 ]
initial
begin
	repeat(7)
	begin
		F0110[2] = 1'b0;
		F0110[2] = #64500 1'b1;
		# 64500;
	end
	F0110[2] = 1'b0;
	F0110[2] = #64500 1'b1;
end 
// F0110[ 1 ]
initial
begin
	repeat(15)
	begin
		F0110[1] = 1'b0;
		F0110[1] = #32250 1'b1;
		# 32250;
	end
	F0110[1] = 1'b0;
	F0110[1] = #32250 1'b1;
end 
// F0110[ 0 ]
initial
begin
	repeat(31)
	begin
		F0110[0] = 1'b0;
		F0110[0] = #16125 1'b1;
		# 16125;
	end
	F0110[0] = 1'b0;
end 
// G0111[ 7 ]
initial
begin
	G0111[7] = 1'b0;
end 
// G0111[ 6 ]
initial
begin
	G0111[6] = 1'b0;
	G0111[6] = #512000 1'b1;
end 
// G0111[ 5 ]
initial
begin
	G0111[5] = 1'b0;
	G0111[5] = #256000 1'b1;
	G0111[5] = #256000 1'b0;
	G0111[5] = #256000 1'b1;
end 
// G0111[ 4 ]
initial
begin
	repeat(3)
	begin
		G0111[4] = 1'b0;
		G0111[4] = #128000 1'b1;
		# 128000;
	end
	G0111[4] = 1'b0;
	G0111[4] = #128000 1'b1;
end 
// G0111[ 3 ]
initial
begin
	repeat(7)
	begin
		G0111[3] = 1'b0;
		G0111[3] = #64000 1'b1;
		# 64000;
	end
	G0111[3] = 1'b0;
	G0111[3] = #64000 1'b1;
end 
// G0111[ 2 ]
initial
begin
	repeat(15)
	begin
		G0111[2] = 1'b0;
		G0111[2] = #32000 1'b1;
		# 32000;
	end
	G0111[2] = 1'b0;
	G0111[2] = #32000 1'b1;
end 
// G0111[ 1 ]
initial
begin
	repeat(31)
	begin
		G0111[1] = 1'b0;
		G0111[1] = #16000 1'b1;
		# 16000;
	end
	G0111[1] = 1'b0;
end 
// G0111[ 0 ]
initial
begin
	repeat(62)
	begin
		G0111[0] = 1'b0;
		G0111[0] = #8000 1'b1;
		# 8000;
	end
	G0111[0] = 1'b0;
end 
// H1000[ 7 ]
initial
begin
	H1000[7] = 1'b0;
	H1000[7] = #512000 1'b1;
end 
// H1000[ 6 ]
initial
begin
	H1000[6] = 1'b0;
	H1000[6] = #256000 1'b1;
	H1000[6] = #256000 1'b0;
	H1000[6] = #256000 1'b1;
end 
// H1000[ 5 ]
initial
begin
	repeat(3)
	begin
		H1000[5] = 1'b0;
		H1000[5] = #128000 1'b1;
		# 128000;
	end
	H1000[5] = 1'b0;
	H1000[5] = #128000 1'b1;
end 
// H1000[ 4 ]
initial
begin
	repeat(7)
	begin
		H1000[4] = 1'b0;
		H1000[4] = #64000 1'b1;
		# 64000;
	end
	H1000[4] = 1'b0;
	H1000[4] = #64000 1'b1;
end 
// H1000[ 3 ]
initial
begin
	repeat(15)
	begin
		H1000[3] = 1'b0;
		H1000[3] = #32000 1'b1;
		# 32000;
	end
	H1000[3] = 1'b0;
	H1000[3] = #32000 1'b1;
end 
// H1000[ 2 ]
initial
begin
	repeat(31)
	begin
		H1000[2] = 1'b0;
		H1000[2] = #16000 1'b1;
		# 16000;
	end
	H1000[2] = 1'b0;
end 
// H1000[ 1 ]
initial
begin
	repeat(62)
	begin
		H1000[1] = 1'b0;
		H1000[1] = #8000 1'b1;
		# 8000;
	end
	H1000[1] = 1'b0;
end 
// H1000[ 0 ]
always
begin
	H1000[0] = 1'b0;
	H1000[0] = #4000 1'b1;
	#4000;
end 

// sel1
always
begin
	sel1 = 1'b0;
	sel1 = #250000 1'b1;
	#250000;
end 

// sel2
always
begin
	sel2 = 1'b0;
	sel2 = #125000 1'b1;
	#125000;
end 

// sel3
always
begin
	sel3 = 1'b0;
	sel3 = #62500 1'b1;
	#62500;
end 
endmodule

