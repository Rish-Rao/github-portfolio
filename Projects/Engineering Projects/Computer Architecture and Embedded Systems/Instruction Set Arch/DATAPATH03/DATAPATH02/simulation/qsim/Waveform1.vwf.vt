// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/13/2022 14:52:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DATAPATH02
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DATAPATH02_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] Addr;
reg CLK;
// wires                                               
wire [7:0] ALU_A;
wire [0:7] ALU_B;
wire [7:0] ALU_OUT;
wire [1:0] ALU_SELECT;
wire bselectforalu;
wire [7:0] DATA;
wire datawriteenable;
wire enableinstructionmemory;
wire enableregisterwrite;
wire [19:0] INSTRUCION;
wire [7:0] RD2;
wire [1:0] WD_SEL;

// assign statements (if any)                          
DATAPATH02 i1 (
// port map - connection between master ports and signals/registers   
	.Addr(Addr),
	.ALU_A(ALU_A),
	.ALU_B(ALU_B),
	.ALU_OUT(ALU_OUT),
	.ALU_SELECT(ALU_SELECT),
	.bselectforalu(bselectforalu),
	.CLK(CLK),
	.DATA(DATA),
	.datawriteenable(datawriteenable),
	.enableinstructionmemory(enableinstructionmemory),
	.enableregisterwrite(enableregisterwrite),
	.INSTRUCION(INSTRUCION),
	.RD2(RD2),
	.WD_SEL(WD_SEL)
);
initial 
begin 
#1000000 $finish;
end 
// Addr[ 4 ]
initial
begin
	Addr[4] = 1'b0;
end 
// Addr[ 3 ]
initial
begin
	Addr[3] = 1'b0;
end 
// Addr[ 2 ]
always
begin
	Addr[2] = 1'b0;
	Addr[2] = #500000 1'b1;
	#500000;
end 
// Addr[ 1 ]
always
begin
	Addr[1] = 1'b0;
	Addr[1] = #250000 1'b1;
	#250000;
end 
// Addr[ 0 ]
always
begin
	Addr[0] = 1'b0;
	Addr[0] = #125000 1'b1;
	#125000;
end 

// CLK
initial
begin
	CLK = 1'b0;
end 
endmodule

