// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/12/2022 15:20:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DATAPATH01
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DATAPATH01_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [7:0] K;
// wires                                               
wire [7:0] DATA;

// assign statements (if any)                          
DATAPATH01 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DATA(DATA),
	.K(K)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 
// K[ 7 ]
initial
begin
	K[7] = 1'b0;
end 
// K[ 6 ]
initial
begin
	K[6] = 1'b0;
end 
// K[ 5 ]
initial
begin
	K[5] = 1'b0;
end 
// K[ 4 ]
initial
begin
	K[4] = 1'b0;
end 
// K[ 3 ]
initial
begin
	K[3] = 1'b0;
end 
// K[ 2 ]
initial
begin
	K[2] = 1'b0;
end 
// K[ 1 ]
initial
begin
	K[1] = 1'b0;
end 
// K[ 0 ]
initial
begin
	K[0] = 1'b1;
end 
endmodule

