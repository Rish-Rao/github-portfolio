// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/14/2022 09:17:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SixteenByEightRF
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SixteenByEightRF_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [7:0] IN;
reg [3:0] RA1;
reg [3:0] RA2;
reg RegWrit;
reg [3:0] WA;
// wires                                               
wire [7:0] RD1;
wire [7:0] RD2;

// assign statements (if any)                          
SixteenByEightRF i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.IN(IN),
	.RA1(RA1),
	.RA2(RA2),
	.RD1(RD1),
	.RD2(RD2),
	.RegWrit(RegWrit),
	.WA(WA)
);
initial 
begin 
#32000000 $finish;
end 

// CLK
initial
begin
	CLK = 1'b1;
	# 500;
	repeat(31)
	begin
		CLK = 1'b0;
		CLK = #500000 1'b1;
		# 500000;
	end
	CLK = 1'b0;
	CLK = #500000 1'b1;
end 
// IN[ 7 ]
initial
begin
	IN[7] = 1'b0;
end 
// IN[ 6 ]
initial
begin
	IN[6] = 1'b0;
end 
// IN[ 5 ]
initial
begin
	IN[5] = 1'b0;
end 
// IN[ 4 ]
always
begin
	IN[4] = 1'b0;
	IN[4] = #16000000 1'b1;
	#16000000;
end 
// IN[ 3 ]
always
begin
	IN[3] = 1'b0;
	IN[3] = #8000000 1'b1;
	#8000000;
end 
// IN[ 2 ]
always
begin
	IN[2] = 1'b0;
	IN[2] = #4000000 1'b1;
	#4000000;
end 
// IN[ 1 ]
always
begin
	IN[1] = 1'b0;
	IN[1] = #2000000 1'b1;
	#2000000;
end 
// IN[ 0 ]
always
begin
	IN[0] = 1'b0;
	IN[0] = #1000000 1'b1;
	#1000000;
end 

// RegWrit
initial
begin
	RegWrit = 1'b1;
	RegWrit = #24000000 1'b0;
end 
// RA1[ 3 ]
always
begin
	RA1[3] = 1'b0;
	RA1[3] = #8000000 1'b1;
	#8000000;
end 
// RA1[ 2 ]
always
begin
	RA1[2] = 1'b0;
	RA1[2] = #4000000 1'b1;
	#4000000;
end 
// RA1[ 1 ]
always
begin
	RA1[1] = 1'b0;
	RA1[1] = #2000000 1'b1;
	#2000000;
end 
// RA1[ 0 ]
always
begin
	RA1[0] = 1'b0;
	RA1[0] = #1000000 1'b1;
	#1000000;
end 
// RA2[ 3 ]
always
begin
	RA2[3] = 1'b0;
	RA2[3] = #8000000 1'b1;
	#8000000;
end 
// RA2[ 2 ]
always
begin
	RA2[2] = 1'b0;
	RA2[2] = #4000000 1'b1;
	#4000000;
end 
// RA2[ 1 ]
always
begin
	RA2[1] = 1'b0;
	RA2[1] = #2000000 1'b1;
	#2000000;
end 
// RA2[ 0 ]
always
begin
	RA2[0] = 1'b0;
	RA2[0] = #1000000 1'b1;
	#1000000;
end 
// WA[ 3 ]
always
begin
	WA[3] = 1'b0;
	WA[3] = #8000000 1'b1;
	#8000000;
end 
// WA[ 2 ]
always
begin
	WA[2] = 1'b0;
	WA[2] = #4000000 1'b1;
	#4000000;
end 
// WA[ 1 ]
always
begin
	WA[1] = 1'b0;
	WA[1] = #2000000 1'b1;
	#2000000;
end 
// WA[ 0 ]
always
begin
	WA[0] = 1'b0;
	WA[0] = #1000000 1'b1;
	#1000000;
end 
endmodule

