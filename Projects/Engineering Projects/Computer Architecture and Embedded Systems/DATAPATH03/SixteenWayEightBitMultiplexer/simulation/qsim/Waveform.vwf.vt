// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/13/2022 23:43:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SixteenWayEightBitMultiplexer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SixteenWayEightBitMultiplexer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg D0;
reg D1;
reg D2;
reg D3;
reg D4;
reg D5;
reg D6;
reg D7;
reg D8;
reg D9;
reg D10;
reg D11;
reg D12;
reg D13;
reg D14;
reg D15;
reg [3:0] S;
// wires                                               
wire Q;

// assign statements (if any)                          
SixteenWayEightBitMultiplexer i1 (
// port map - connection between master ports and signals/registers   
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.D7(D7),
	.D8(D8),
	.D9(D9),
	.D10(D10),
	.D11(D11),
	.D12(D12),
	.D13(D13),
	.D14(D14),
	.D15(D15),
	.Q(Q),
	.S(S)
);
initial 
begin 
#16000000 $finish;
end 
// S[ 3 ]
always
begin
	S[3] = 1'b0;
	S[3] = #8000000 1'b1;
	#8000000;
end 
// S[ 2 ]
always
begin
	S[2] = 1'b0;
	S[2] = #4000000 1'b1;
	#4000000;
end 
// S[ 1 ]
always
begin
	S[1] = 1'b0;
	S[1] = #2000000 1'b1;
	#2000000;
end 
// S[ 0 ]
always
begin
	S[0] = 1'b0;
	S[0] = #1000000 1'b1;
	#1000000;
end 

// D0
initial
begin
	D0 = 1'b1;
	D0 = #1000000 1'b0;
end 

// D1
initial
begin
	D1 = 1'b0;
	D1 = #1000000 1'b1;
	D1 = #1000000 1'b0;
end 

// D2
initial
begin
	D2 = 1'b0;
	D2 = #2000000 1'b1;
	D2 = #1000000 1'b0;
end 

// D3
initial
begin
	D3 = 1'b0;
	D3 = #3000000 1'b1;
	D3 = #1000000 1'b0;
end 

// D4
initial
begin
	D4 = 1'b0;
	D4 = #4000000 1'b1;
	D4 = #1000000 1'b0;
end 

// D5
initial
begin
	D5 = 1'b0;
	D5 = #5000000 1'b1;
	D5 = #1000000 1'b0;
end 

// D6
initial
begin
	D6 = 1'b0;
	D6 = #6000000 1'b1;
	D6 = #1000000 1'b0;
end 

// D7
initial
begin
	D7 = 1'b0;
	D7 = #7000000 1'b1;
	D7 = #1000000 1'b0;
end 

// D8
initial
begin
	D8 = 1'b0;
	D8 = #8000000 1'b1;
	D8 = #1000000 1'b0;
end 

// D9
initial
begin
	D9 = 1'b0;
	D9 = #9000000 1'b1;
	D9 = #1000000 1'b0;
end 

// D10
initial
begin
	D10 = 1'b0;
	D10 = #10000000 1'b1;
	D10 = #1000000 1'b0;
end 

// D11
initial
begin
	D11 = 1'b0;
	D11 = #11000000 1'b1;
	D11 = #1040000 1'b0;
end 

// D12
initial
begin
	D12 = 1'b0;
	D12 = #12040000 1'b1;
	D12 = #960000 1'b0;
end 

// D13
initial
begin
	D13 = 1'b0;
	D13 = #13000000 1'b1;
	D13 = #1000000 1'b0;
end 

// D14
initial
begin
	D14 = 1'b0;
	D14 = #14000000 1'b1;
	D14 = #1040000 1'b0;
end 

// D15
initial
begin
	D15 = 1'b0;
	D15 = #15040000 1'b1;
end 
endmodule

