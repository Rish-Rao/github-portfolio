// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/13/2022 23:32:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FourToSixteenDecoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FourToSixteenDecoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] WA;
// wires                                               
wire R1;
wire R2;
wire R3;
wire R4;
wire R5;
wire R6;
wire R7;
wire R8;
wire R9;
wire R10;
wire R11;
wire R12;
wire R13;
wire R14;
wire R15;
wire R16;

// assign statements (if any)                          
FourToSixteenDecoder i1 (
// port map - connection between master ports and signals/registers   
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.R4(R4),
	.R5(R5),
	.R6(R6),
	.R7(R7),
	.R8(R8),
	.R9(R9),
	.R10(R10),
	.R11(R11),
	.R12(R12),
	.R13(R13),
	.R14(R14),
	.R15(R15),
	.R16(R16),
	.WA(WA)
);
initial 
begin 
#16000000 $finish;
end 
// WA[ 3 ]
always
begin
	WA[3] = 1'b0;
	WA[3] = #8000000 1'b1;
	#8000000;
end 
// WA[ 2 ]
always
begin
	WA[2] = 1'b0;
	WA[2] = #4000000 1'b1;
	#4000000;
end 
// WA[ 1 ]
always
begin
	WA[1] = 1'b0;
	WA[1] = #2000000 1'b1;
	#2000000;
end 
// WA[ 0 ]
always
begin
	WA[0] = 1'b0;
	WA[0] = #1000000 1'b1;
	#1000000;
end 
endmodule

