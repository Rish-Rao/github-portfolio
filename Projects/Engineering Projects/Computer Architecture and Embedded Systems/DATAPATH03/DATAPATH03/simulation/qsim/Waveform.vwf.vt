// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/14/2022 16:06:25"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DATAPATH03
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DATAPATH03_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [7:0] K;
// wires                                               
wire [7:0] A;
wire ADDORSUB;
wire AGEB;
wire [7:0] ALUB;
wire [1:0] ALUSEL;
wire [5:0] BIMM;
wire branch;
wire BRANCH0;
wire BRANCH1;
wire BRANCH2;
wire BRANCH3;
wire BRANCH4;
wire BRANCH5;
wire BRANCH6;
wire BRANCH7;
wire [7:0] BRIMM;
wire BSel;
wire DataMemEN;
wire InstrMemEN;
wire [19:0] INSTRUCTION;
wire jump;
wire [7:0] LUI;
wire [3:0] OPCODE;
wire [7:0] PC;
wire [7:0] PCIMM;
wire PCSrc;
wire [3:0] RA1;
wire [3:0] RA2;
wire [7:0] RD2;
wire RegWriteEN;
wire [7:0] RESULT;
wire [3:0] WA;
wire [7:0] WD;
wire [1:0] WDSEL;

// assign statements (if any)                          
DATAPATH03 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ADDORSUB(ADDORSUB),
	.AGEB(AGEB),
	.ALUB(ALUB),
	.ALUSEL(ALUSEL),
	.BIMM(BIMM),
	.branch(branch),
	.BRANCH0(BRANCH0),
	.BRANCH1(BRANCH1),
	.BRANCH2(BRANCH2),
	.BRANCH3(BRANCH3),
	.BRANCH4(BRANCH4),
	.BRANCH5(BRANCH5),
	.BRANCH6(BRANCH6),
	.BRANCH7(BRANCH7),
	.BRIMM(BRIMM),
	.BSel(BSel),
	.CLK(CLK),
	.DataMemEN(DataMemEN),
	.InstrMemEN(InstrMemEN),
	.INSTRUCTION(INSTRUCTION),
	.jump(jump),
	.K(K),
	.LUI(LUI),
	.OPCODE(OPCODE),
	.PC(PC),
	.PCIMM(PCIMM),
	.PCSrc(PCSrc),
	.RA1(RA1),
	.RA2(RA2),
	.RD2(RD2),
	.RegWriteEN(RegWriteEN),
	.RESULT(RESULT),
	.WA(WA),
	.WD(WD),
	.WDSEL(WDSEL)
);
initial 
begin 
#9750000 $finish;
end 
// K[ 7 ]
initial
begin
	K[7] = 1'b0;
end 
// K[ 6 ]
initial
begin
	K[6] = 1'b0;
end 
// K[ 5 ]
initial
begin
	K[5] = 1'b0;
end 
// K[ 4 ]
initial
begin
	K[4] = 1'b0;
end 
// K[ 3 ]
initial
begin
	K[3] = 1'b0;
end 
// K[ 2 ]
initial
begin
	K[2] = 1'b0;
end 
// K[ 1 ]
initial
begin
	K[1] = 1'b0;
end 
// K[ 0 ]
initial
begin
	K[0] = 1'b1;
end 

// CLK
initial
begin
	CLK = 1'b1;
	# 250000;
	repeat(19)
	begin
		CLK = 1'b0;
		CLK = #250000 1'b1;
		# 250000;
	end
end 
endmodule

