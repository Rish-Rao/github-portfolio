// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/04/2022 16:23:55"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          dcdr4bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dcdr4bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] ADDR;
reg REGWRITE;
// wires                                               
wire EN0000;
wire EN0001;
wire EN0010;
wire EN0011;
wire EN0100;
wire EN0101;
wire EN0110;
wire EN0111;
wire EN1000;
wire EN1001;
wire EN1010;
wire EN1011;
wire EN1100;
wire EN1101;
wire EN1110;
wire EN1111;

// assign statements (if any)                          
dcdr4bit i1 (
// port map - connection between master ports and signals/registers   
	.ADDR(ADDR),
	.EN0000(EN0000),
	.EN0001(EN0001),
	.EN0010(EN0010),
	.EN0011(EN0011),
	.EN0100(EN0100),
	.EN0101(EN0101),
	.EN0110(EN0110),
	.EN0111(EN0111),
	.EN1000(EN1000),
	.EN1001(EN1001),
	.EN1010(EN1010),
	.EN1011(EN1011),
	.EN1100(EN1100),
	.EN1101(EN1101),
	.EN1110(EN1110),
	.EN1111(EN1111),
	.REGWRITE(REGWRITE)
);
initial 
begin 
#1000000 $finish;
end 
// ADDR[ 3 ]
always
begin
	ADDR[3] = 1'b0;
	ADDR[3] = #250000 1'b1;
	#250000;
end 
// ADDR[ 2 ]
always
begin
	ADDR[2] = 1'b0;
	ADDR[2] = #125000 1'b1;
	#125000;
end 
// ADDR[ 1 ]
always
begin
	ADDR[1] = 1'b0;
	ADDR[1] = #62500 1'b1;
	#62500;
end 
// ADDR[ 0 ]
always
begin
	ADDR[0] = 1'b0;
	ADDR[0] = #31250 1'b1;
	#31250;
end 

// REGWRITE
initial
begin
	REGWRITE = 1'b1;
	REGWRITE = #550000 1'b0;
end 
endmodule

