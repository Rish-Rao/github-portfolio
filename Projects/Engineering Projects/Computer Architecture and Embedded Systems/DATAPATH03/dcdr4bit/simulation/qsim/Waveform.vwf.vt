// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/04/2022 16:04:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          dcdr4bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dcdr4bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] ADDR;
reg REGWRITE;
// wires                                               
wire 0000;
wire 0001;
wire 0010;
wire 0011;
wire 0100;
wire 0101;
wire 0110;
wire 0111;
wire 1000;
wire 1001;
wire 1010;
wire 1011;
wire 1100;
wire 1101;
wire 1110;
wire 1111;

// assign statements (if any)                          
dcdr4bit i1 (
// port map - connection between master ports and signals/registers   
	.\0000 (0000),
	.\0001 (0001),
	.\0010 (0010),
	.\0011 (0011),
	.\0100 (0100),
	.\0101 (0101),
	.\0110 (0110),
	.\0111 (0111),
	.\1000 (1000),
	.\1001 (1001),
	.\1010 (1010),
	.\1011 (1011),
	.\1100 (1100),
	.\1101 (1101),
	.\1110 (1110),
	.\1111 (1111),
	.ADDR(ADDR),
	.REGWRITE(REGWRITE)
);
initial 
begin 
#1000000 $finish;
end 
// ADDR[ 3 ]
always
begin
	ADDR[3] = 1'b0;
	ADDR[3] = #500000 1'b1;
	#500000;
end 
// ADDR[ 2 ]
always
begin
	ADDR[2] = 1'b0;
	ADDR[2] = #250000 1'b1;
	#250000;
end 
// ADDR[ 1 ]
always
begin
	ADDR[1] = 1'b0;
	ADDR[1] = #125000 1'b1;
	#125000;
end 
// ADDR[ 0 ]
always
begin
	ADDR[0] = 1'b0;
	ADDR[0] = #62500 1'b1;
	#62500;
end 

// REGWRITE
initial
begin
	REGWRITE = 1'b1;
end 
endmodule

