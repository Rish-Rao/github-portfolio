// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/04/2022 15:23:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          reg8bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module reg8bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] D;
reg EN;
// wires                                               
wire [7:0] Q;

// assign statements (if any)                          
reg8bit i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.D(D),
	.EN(EN),
	.Q(Q)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #31250 1'b1;
	#31250;
end 
// D[ 7 ]
initial
begin
	D[7] = 1'b0;
end 
// D[ 6 ]
initial
begin
	D[6] = 1'b0;
end 
// D[ 5 ]
initial
begin
	D[5] = 1'b0;
end 
// D[ 4 ]
initial
begin
	D[4] = 1'b0;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b0;
end 
// D[ 2 ]
always
begin
	D[2] = 1'b0;
	D[2] = #500000 1'b1;
	#500000;
end 
// D[ 1 ]
always
begin
	D[1] = 1'b0;
	D[1] = #250000 1'b1;
	#250000;
end 
// D[ 0 ]
always
begin
	D[0] = 1'b0;
	D[0] = #125000 1'b1;
	#125000;
end 

// EN
initial
begin
	EN = 1'b1;
end 
endmodule

